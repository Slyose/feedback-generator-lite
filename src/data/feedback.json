{
  "sprints": [
    {
      "id": "Frontend-NC-News",
      "tasks": [
        {
          "taskName": "Create React project and public repo",
          "taskNumber": 1,
          "advanced": false,
          "aspects": [
            {
              "description": "React app correctly set in the root of the repo.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "Nicely done, project setup correctly. Code away!",
                  "evenBetterIf": "Make sure to move app files out of any nested folder created by create-react-app. Otherwise, this will be a pain when we get to seeding!"
                }
              ]
            }
          ]
        },
        {
          "taskName": "Enable CORS",
          "taskNumber": 2,
          "advanced": false,
          "aspects": [
            {
              "description": "CORS enabled following the backend hosting guide.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "CORS setup correctly to allow for frontend to backend communication, well done",
                  "evenBetterIf": "Ensure to follow the specific steps mentioned in the BE hosting guide for enabling CORS."
                }
              ]
            }
          ]
        },
        {
          "taskName": "Planning",
          "taskNumber": 3,
          "advanced": true,
          "aspects": [
            {
              "description": "Mobile-first wireframes and component trees are well-defined.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "Wireframes reflect a mobile-first design approach.",
                  "evenBetterIf": "Cover all planned pages in wireframe with clear flow."
                }
              ]
            },
            {
              "description": "Distinction between API endpoints for accessing data and page routes is clear.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "API endpoints and frontend paths are correctly distinguished in planning.",
                  "evenBetterIf": "Check understanding if there seems to be confusion between API endpoints and frontend paths."
                }
              ]
            },
            {
              "description": "Frontend paths for pages well planned.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "Expected frontend paths for each page are specified.",
                  "evenBetterIf": "Include a clear indication of what API the component data will come from."
                }
              ]
            }
          ]
        },
        {
          "taskName": "View all articles",
          "taskNumber": 4,
          "advanced": false,
          "aspects": [
            {
              "description": "List of all articles viewable on the home page or via a dedicated link.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Requests to API for articles are managed in a separate utilities file.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "User receives visual feedback during data loading.",
              "importance": "should",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Pagination for articles list (optional at this stage).",
              "importance": "could",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Responsive design considerations for articles list.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        },
        {
          "taskName": "View individual article",
          "taskNumber": 5,
          "advanced": false,
          "aspects": [
            {
              "description": "Single article viewable on its own page.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Navigation to article page from all articles list.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Article data fetched from API using article ID in URL.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Page renders correctly on refresh, not relying on previous state.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Has an isLoading state that gives the user visual feedback",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "URL should show article id in the format of /articles/:article_id",
              "importance": "should",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Requests to api should be handled separately in a utils file using axios",
              "importance": "should",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Requests to api should be handled separately in a utils file using axios",
              "importance": "should",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        },
        {
          "taskName": "View list of comments associated with an article",
          "taskNumber": 6,
          "advanced": false,
          "aspects": [
            {
              "description": "Comments list viewable on the article page.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "UI accounts for articles without comments.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Components should not be too large. Consider seperate component to reduce bloat",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": "Consider seperate a seperate component for your comments in order to reduce bloat on the main article component."
                }
              ]
            },
            {
              "description": "Visual feedback provided during comments data loading.",
              "importance": "should",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        },
        {
          "taskName": "Vote on article",
          "taskNumber": 7,
          "advanced": false,
          "aspects": [
            {
              "description": "Ability to vote on an article with immediate UI update.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Vote change persists on page refresh.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "User notified if vote update request fails.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Optional: Downvote functionality.",
              "importance": "could",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Ideally should use one function to handle both upvotes and downvotes",
              "importance": "could",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Optional: Limit users to one vote in either direction.",
              "importance": "could",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        },
        {
          "taskName": "Post article comment",
          "taskNumber": 8,
          "advanced": false,
          "aspects": [
            {
              "description": "Logged-in users can post comments.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Feedback provided on successful comment post.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Feedback provided on unsuccessful comment post.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Comment bodies should be multi-line i.e. textarea over input.",
              "importance": "should",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "On success, should show new comment on the top. ",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Comments should NOT be refetched from the api after a POST. (Update state using the returned newComment).",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Prevention of comment post if not logged in.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Prevention of multiple submissions by disabling post button.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "User should not be able to post empty comments.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Optional: Login functionality implementation.",
              "importance": "could",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        },
        {
          "taskName": "Delete comments",
          "taskNumber": 9,
          "advanced": false,
          "aspects": [
            {
              "description": "Logged-in user can delete comments.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "User only able to delete their own comments",
              "importance": "could",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Visual feedback for ongoing delete requests.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Feedback provided on successful deletion.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Feedback provided on unsuccessful deletion.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "User should not be able to click the delete button (or delete a comment) multiple times.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        },
        {
          "taskName": "View articles by topic",
          "taskNumber": 10,
          "advanced": false,
          "aspects": [
            {
              "description": "Articles filterable by topic via UI.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "API used to filter topics rather than local filtering.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "UI element (links/dropdown) for topic navigation.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Consistent UI between all topics and filtered topics view.",
              "importance": "should",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        },
        {
          "taskName": "Sort articles",
          "taskNumber": 11,
          "advanced": false,
          "aspects": [
            {
              "description": "Sorting of articles by date/votes/comment count.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "UI elements allow for sorting control.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Default sorting by date in descending order.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Optional: URL reflects sort options.",
              "importance": "could",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        },
        {
          "taskName": "Error handling",
          "taskNumber": 12,
          "advanced": false,
          "aspects": [
            {
              "description": "404 page redirection for nonexistent path.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Error display for viewing non-existent articles.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Error display for viewing non-existent topics.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Invalid values for any other parametrics or queries the app accepts are handled (400)",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Should use one reuseable error page component",
              "importance": "should",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        },
        {
          "taskName": "Deploy app",
          "taskNumber": 13,
          "advanced": false,
          "aspects": [
            {
              "description": "Navigable app through hosted link without errors.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Correct routing setup for refreshes on sub-routes.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Use of production deployments for public URL.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        },
        {
          "taskName": "README",
          "taskNumber": 14,
          "advanced": false,
          "aspects": [
            {
              "description": "Link to deployed version and back end repo.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "General app info and description.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Specifies minimum Node version needed to run locally.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Instructions for running the project locally.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            },
            {
              "description": "Markdown styling considerations, instructions should be readable, with headings.",
              "importance": "must",
              "feedbacks": [{ "whatWentWell": "", "evenBetterIf": "" }]
            }
          ]
        }
      ]
    },
    {
      "id": "backend-NC-News",
      "tasks": [
        {
          "taskName": "GET /api/topics",
          "taskNumber": 2,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 200, returns an array of topic objects with slug and description.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Optional: Status 404 Invalid path, may be handled with a custom error handler",
              "importance": "could",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Optional: Status 500 error handling, acceptable to include a 500 error hanlder, do not need to test for this",
              "importance": "could",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Should not include app.use(express.json())",
              "importance": "should",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should not include app.listen() in app.js",
              "importance": "should",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            }
          ]
        },
        {
          "taskName": "GET /api",
          "taskNumber": 3,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 200, JSON describing all the available endpoints.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Doesn't use a model to require in the data",
              "importance": "should",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Required in the file directly instead of using fs readdfile.",
              "importance": "should",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "The information in the endpoints.json file should be served up by an endpoint.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            }
          ]
        },
        {
          "taskName": "GET /api/articles/:article_id",
          "taskNumber": 4,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 200 test, should check for a specfic article id in the test",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Should use a flexible mathcer like expect.objectContaining or .toMatchObject",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 400 test, invalid ID, e.g. string of 'not-an-id'",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 404, non existent ID, e.g. 0 or 9999",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should return the data on an descriptive key eg article",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should make use of a parameterized query for article_id to protect against SQL injection.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": "To protect against SQL injection, we'd want to make use of a parameterized query for article_id."
                }
              ]
            }
          ]
        },
        {
          "taskName": "GET /api/articles",
          "taskNumber": 5,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 200 test, array of article objects",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should check length of array if asserting inside a forEach.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Response includes comment_count, excludes body.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 200, should sort by created_at, desc by default",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should check the sort order in some way eg jest-sorted library.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should check length of array if asserting inside a forEach.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should return the data on an appropriate key eg articles",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            }
          ]
        },
        {
          "taskName": "GET /api/articles/:article_id/comments",
          "taskNumber": 6,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 200 test, array of comment objects for the specified article ",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should return the data on an appropriate key eg comments",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should also check the order of the comments in some way",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should check length of array if asserting inside a forEach.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 200, valid ID, but has no comments responds with an empty array of comments",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 400, invalid ID, e.g. string of 'not-an-id'",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 404, non existent ID, e.g. 0 or 9999",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            }
          ]
        },
        {
          "taskName": "POST /api/articles/:article_id/comments",
          "taskNumber": 7,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 201, created comment object",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 201, ignores unnecessary properties on req",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 400, invalid ID, e.g. string of 'not-an-id'",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 404, non existent ID, e.g. 0 or 9999",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 400, missing required field(s), e.g. no username or body properties",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 404, username does not exist",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },

            {
              "description": "Should return data on a descriptive key of comment",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            }
          ]
        },
        {
          "taskName": "PATCH /api/articles/:article_id",
          "taskNumber": 8,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 200, updated single article object.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 400, invalid ID, e.g. string of 'not-an-id'",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 404, non existent ID, e.g. 0 or 9999",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Optional: Status 200, if inc_votes is missing. Can also be a 400, but not ideal",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            }
          ]
        },
        {
          "taskName": "DELETE /api/comments/:comment_id",
          "taskNumber": 9,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 204, deletes comment from database",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 404, non existent ID, e.g 999",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 400, invalid ID, e.g 'not-an-id'",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "No response body: uses res.sendStatus(204) or res.status(204).send()",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Non-existent comment will need to be handled with a custom error handler",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            }
          ]
        },
        {
          "taskName": "GET /api/users",
          "taskNumber": 10,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 200, responds with array of user objects",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should check length of array if asserting inside a forEach.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            }
          ]
        },
        {
          "taskName": "GET /api/articles (topic query)",
          "taskNumber": 11,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 200, accepts topic query, e.g. ?topic=coding",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "should check that all returned objects have the queried topic.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 200, valid topic query, but has no articles responds with an empty array of articles, e.g. ?topic=paper",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Status 404, non-existent topic query, e.g. ?topic=bananas.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "The filtering should be handled by the db and not done manually.",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Check for SQL injection (any method is acceptable)",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            }
          ]
        },
        {
          "taskName": "GET /api/articles/:article_id (comment count)",
          "taskNumber": 12,
          "advanced": false,
          "aspects": [
            {
              "description": "Status 200, single article object (including comment_count) ",
              "importance": "must",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "this should be a new test rather than a refactor of a previous test (may not be possible if the previous test was too brittle.)",
              "importance": "should",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            },
            {
              "description": "Should be achieved with a single SQL query",
              "importance": "should",
              "feedbacks": [
                {
                  "whatWentWell": "",
                  "evenBetterIf": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
